plugins {
	id "checkstyle"
	id "io.spring.javaformat" version "$javaFormatVersion"
	id "java-gradle-plugin"
	id "maven-publish"
	id "io.spring.compatibility-test" version "0.0.2"
}

description = "Gradle Enterprise Conventions Gradle plugin"
group = 'io.spring.ge.conventions'

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
	mavenCentral()
	gradlePluginPortal()
}

configurations {
	compatibilityTestImplementation
}

dependencies {
	checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:${javaFormatVersion}")

	compileOnly("com.gradle:gradle-enterprise-gradle-plugin:${gradleEnterprisePluginVersion}")

	testImplementation("com.gradle:gradle-enterprise-gradle-plugin:${gradleEnterprisePluginVersion}")
	testImplementation("org.assertj:assertj-core:3.25.3")
	testImplementation("org.junit.jupiter:junit-jupiter:5.10.2")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
	testImplementation("org.mockito:mockito-core:4.11.0")
}

gradlePlugin {
	plugins {
		gradleEnterprisePlugin {
			displayName = project.description
			description = project.description
			id = 'io.spring.ge.conventions'
			implementationClass = 'io.spring.ge.conventions.gradle.GradleEnterpriseConventionsPlugin'
		}
	}
}

compatibilityTest {
	useJUnitPlatform()
	dependency('Gradle Enterprise Plugin') { gePlugin ->
		gePlugin.groupId = 'com.gradle'
		gePlugin.artifactId = 'gradle-enterprise-gradle-plugin'
		gePlugin.versions = [
			'3.15.1',
			'3.14.1'
		]
	}
}

tasks.withType(Test) { testTask ->
	if (testTask.name.startsWith("compatibilityTest_")) {
		testTask.filter {
			includeTestsMatching "*IntegrationTests"
		}
	}
}

test {
	useJUnitPlatform()
}

java {
	withJavadocJar()
	withSourcesJar()
}

checkstyle {
	def archive = configurations.checkstyle.filter { it.name.startsWith("spring-javaformat-checkstyle")}
	config = resources.text.fromArchiveEntry(archive, "io/spring/javaformat/checkstyle/checkstyle.xml")
	toolVersion = 9.3
}

tasks.withType(GenerateModuleMetadata).all {
	enabled = false
}

if (project.hasProperty("distributionRepository")) {
	publishing {
		repositories {
			maven {
				url = "${distributionRepository}"
				name = "deployment"
			}
		}
	}
}

publishing {
	publications {
		withType(MavenPublication) { mavenPublication -> 
			pom {
				name = project.description
				description = project.description
				url = 'https://github.com/spring-io/gradle-enterprise-conventions'
				organization {
					name = 'Pivotal Software, Inc.'
					url = 'https://spring.io'
				}
				licenses {
					license {
						name = 'The Apache Software License, Version 2.0'
						url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				scm {
					url = 'https://github.com/spring-io/gradle-enterprise-conventions'
					connection = 'scm:git:https://github.com/spring-io/gradle-enterprise-conventions'
				}
				developers {
					developer {
						id = 'wilkinsona'
						name = 'Andy Wilkinson'
						email = 'awilkinson@pivotal.io'
						roles = ["Project lead"]
					}
				}
			}
		}
	}
}
